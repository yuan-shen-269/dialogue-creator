{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","dialogueName","isChinese","displayOrder","defaultMediaWaitTime","mediaIntervalTime","sessionIntervalTime","sentenceIntervalTime","autoTagExtraction","sessions","dialogueFields","setDialogueFields","handleDialogueInputChange","index","event","values","target","name","value","checked","trim","split","parseFloat","id","weight","s_tags","sentences","sessionFields","setSessionFields","handleSessionInputChange","sessionValues","parseInt","console","log","sentence","reactions","r_tag","names","sentenceFields","setSentenceFields","handleSentenceInputChange","sessionIndex","sentenceIndex","sentenceValues","length","replace","handleSubmit","e","preventDefault","onSubmit","className","map","inputField","htmlFor","type","onChange","sessionField","sentenceField","rows","cols","onClick","splice","handleRemoveSentence","push","handleAddSentence","handleRemoveSession","handleAddSession","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caa21575.chunk.js","sourcesContent":["import './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { useState, Fragment } from 'react';\nimport Select from 'react-select';\n\nconst App = () => {\n\n  const [dialogueFields, setDialogueFields] = useState(\n    [\n      {\n        dialogueName: '',\n        isChinese: true,\n        displayOrder: [],\n        defaultMediaWaitTime: 0.0,\n        mediaIntervalTime: 0.0,\n        sessionIntervalTime: 0.0,\n        sentenceIntervalTime: 0.0,\n        autoTagExtraction: false,\n        sessions : []\n      }\n    ]\n  );\n\n\n  const handleDialogueInputChange = (index, event) => {\n    const values = [...dialogueFields];\n    if(event.target.name === \"dialogueName\"){\n      values[index].dialogueName = event.target.value;\n    }\n    else if(event.target.name === \"isChinese\"){\n      values[index].isChinese = event.target.checked;\n    }\n    else if(event.target.name === \"displayOrder\"){\n      // To-do: convert all elements to integer\n      values[index].displayOrder = event.target.value.trim().split(',');\n    }\n    else if(event.target.name === \"defaultMediaWaitTime\"){\n      values[index].defaultMediaWaitTime = parseFloat(event.target.value);\n    }\n    else if(event.target.name === \"mediaIntervalTime\"){\n      values[index].mediaIntervalTime = parseFloat(event.target.value);\n    }\n    else if(event.target.name === \"sessionIntervalTime\"){\n      values[index].sessionIntervalTime = parseFloat(event.target.value);\n    }\n    else if(event.target.name === \"sentenceIntervalTime\"){\n      values[index].sentenceIntervalTime = parseFloat(event.target.value);\n    }\n    else if(event.target.name === \"autoTagExtraction\"){\n      values[index].autoTagExtraction = event.target.checked;\n    }\n\n    setDialogueFields(values);\n  }\n\n  const [sessionFields, setSessionFields] = useState(\n    [\n      {\n        name: '',\n        id: 0,\n        weight: 0,\n        s_tags: [],\n        sentences : [\n\n        ] \n      }  \n    ]\n  );\n\n  const handleSessionInputChange = (index, event) => {\n    const sessionValues = [...sessionFields];\n    const values = [...dialogueFields];\n\n    if(event.target.name === \"name\"){\n      sessionValues[index].name = event.target.value;\n    }\n    else if(event.target.name === \"id\"){\n      sessionValues[index].id = parseInt(event.target.value);\n    }\n    else if(event.target.name === \"weight\"){\n      sessionValues[index].weight = parseInt(event.target.value);\n    }\n    else if(event.target.name === \"s_tags\"){\n      console.log(\"yesss\");\n      sessionValues[index].s_tags = event.target.value.trim().split(',');\n    }\n\n    setSessionFields(sessionValues);\n\n    values[0].sessions = sessionValues;\n\n    setDialogueFields(values);\n  }\n\n\n    // To-do: not sure why if not filling the first one cannot \n  // create new session\n  const handleAddSession = () => {\n    const values = [...dialogueFields];\n    const sessionValues = [...sessionFields];\n    const sentenceValues = [...sentenceFields];\n\n    sentenceValues.push(\n      {\n        sentences : [\n          {\n            sentence: '',\n            reactions: [\n              {\n                r_tag: 0,\n                names: []\n              },\n              {\n                r_tag: 1,\n                names: []\n              },\n              {\n                r_tag: 2,\n                names: []\n              },\n              {\n                r_tag: 3,\n                names: []\n              },\n              {\n                r_tag: 4,\n                names: []\n              }\n            ]\n          }\n        ]\n      }\n    );\n\n    setSentenceFields(sentenceValues);\n\n    sessionValues.push(\n      {\n        name: '',\n        id: 0,\n        weight: 0,\n        s_tags: [],\n        sentences : [] \n      }\n    )\n    \n    setSessionFields(sessionValues);\n\n    values[0].sessions = sessionValues;\n\n    setDialogueFields(values);\n  }\n\n  const handleRemoveSession = sessionIndex => {\n    const values = [...dialogueFields];\n    const sessionValues = [...sessionFields];\n    const sentenceValues = [...sentenceFields];\n    \n    sentenceValues.splice(sessionIndex, 1);\n    setSentenceFields(sentenceValues);\n\n    sessionValues.splice(sessionIndex, 1);\n    setSessionFields(sessionValues);\n\n    values[0].sessions = sessionValues;\n    setDialogueFields(values);\n  }\n\n  const [sentenceFields, setSentenceFields] = useState(\n    [\n      {\n        sentences: [\n          {\n            sentence: '',\n            reactions: [\n              {\n                r_tag: 0,\n                names: []\n              },\n              {\n                r_tag: 1,\n                names: []\n              },\n              {\n                r_tag: 2,\n                names: []\n              },\n              {\n                r_tag: 3,\n                names: []\n              },\n              {\n                r_tag: 4,\n                names: []\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  );\n\n  const handleSentenceInputChange = (sessionIndex, sentenceIndex, event) => {\n    const values = [...dialogueFields];\n    const sessionValues = [...sessionFields];\n    const sentenceValues = [...sentenceFields];\n\n    if(sentenceIndex < sentenceValues[sessionIndex].sentences.length){\n      if(event.target.name === \"sentence\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].sentence = event.target.value;\n      }\n      else if(event.target.name === \"actions\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].reactions[0].names = event.target.value.replace(/\\n/g, \",\").split(',');\n      }\n      else if(event.target.name === \"emotions\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].reactions[1].names  = event.target.value.replace(/\\n/g, \",\").split(',');\n      }\n      else if(event.target.name === \"movements\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].reactions[2].names  = event.target.value.replace(/\\n/g, \",\").split(',');\n      }\n      else if(event.target.name === \"sceneTriggers\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].reactions[3].names  = event.target.value.replace(/\\n/g, \",\").split(',');\n      }\n      else if(event.target.name === \"displays\"){\n        sentenceValues[sessionIndex].sentences[sentenceIndex].reactions[4].names  = event.target.value.replace(/\\n/g, \",\").split(',');\n      }\n  \n      setSentenceFields(sentenceValues);\n  \n      sessionValues[sessionIndex].sentences[sentenceIndex] = sentenceValues[sessionIndex].sentences[sentenceIndex];\n  \n      setSessionFields(sessionValues);\n  \n      values[0].sessions = sessionValues;\n  \n      setDialogueFields(values);\n    }\n  }\n\n  const handleAddSentence = (sessionIndex) => {\n    const values = [...dialogueFields];\n    const sessionValues = [...sessionFields];\n    const sentenceValues = [...sentenceFields];\n\n    sentenceValues[sessionIndex].sentences.push(\n      {\n        sentence: '',\n        reactions: [\n          {\n            r_tag: 0,\n            names: []\n          },\n          {\n            r_tag: 1,\n            names: []\n          },\n          {\n            r_tag: 2,\n            names: []\n          },\n          {\n            r_tag: 3,\n            names: []\n          },\n          {\n            r_tag: 4,\n            names: []\n          }\n        ]\n      }\n    );\n\n    setSentenceFields(sentenceValues);\n\n    sessionValues[sessionIndex].sentences.push(\n      {\n        sentence: '',\n        reactions: [\n          {\n            r_tag: 0,\n            names: []\n          },\n          {\n            r_tag: 1,\n            names: []\n          },\n          {\n            r_tag: 2,\n            names: []\n          },\n          {\n            r_tag: 3,\n            names: []\n          },\n          {\n            r_tag: 4,\n            names: []\n          }\n        ]\n      }\n    );\n\n    setSessionFields(sessionValues);\n\n    values[0].sessions = sessionValues;\n\n    setDialogueFields(values);\n  }\n\n  const handleRemoveSentence = (sessionIndex, sentenceIndex) => {\n    const values = [...dialogueFields];\n    const sessionValues = [...sessionFields];\n    const sentenceValues = [...sentenceFields];\n\n    sentenceValues[sessionIndex].sentences.splice(sentenceIndex, 1);\n    setSentenceFields(sentenceValues);\n\n    sessionValues[sessionIndex].sentences.splice(sentenceIndex, 1);\n    setSessionFields(sessionValues);\n\n    values[0].sessions = sessionValues;\n    setDialogueFields(values);\n  }  \n\n  // const [reactionFields, setReactionFields] = useState(\n  //   [\n  //     {\n  //       r_tag: 0,\n  //       names: []\n  //     }\n  //   ]\n  // );\n\n\n  // const handleReactionInputChange = (sessionIndex, sentenceIndex, reactionIndex, event) => {\n  //   const values = [...dialogueFields];\n  //   const sessionValues = [...sessionFields];\n  //   const sentenceValues = [...sentenceFields];\n  //   const reactionValues = [...reactionFields];\n\n  //   // To-do: Add option and mappings here\n  //   if(event.target.name === \"r_tag\"){\n  //     reactionFields[reactionIndex].r_tag = parseInt(event.target.value);\n  //   }\n  //   else if (event.target.name = \"names\"){\n  //     // To-do: probably add names??\n  //     reactionFields[reactionIndex].names = event.target.value.trim().split(',');\n  //   }\n\n  //   setReactionFields(reactionValues);\n\n  //   sentenceValues[sentenceIndex].reactions = reactionValues;\n\n  //   setSentenceFields(sentenceValues);\n\n  //   sessionValues[sessionIndex].sentences = sentenceValues;\n\n  //   setSessionFields(sessionValues);\n\n  //   values[0].sessions = sessionValues;\n\n  //   setDialogueFields(values);\n  // }\n\n  // const handleAddReaction = (sessionIndex, sentenceIndex) => {\n  //   const values = [...dialogueFields];\n  //   const sessionValues = [...sessionFields];\n  //   const sentenceValue = [...sentenceFields];\n\n  //   sessionValues[sessionIndex].sentences[sentenceIndex].reactions.push(\n  //     {\n  //       r_tag: 0,\n  //       names: []\n  //     }\n  //   );\n\n  //   setSentenceFields(sentenceValues);\n\n  //   sessionValues[sessionIndex].sentences = sentenceFields;\n\n  //   setSessionFields(sessionValues);\n\n  //   values[0].sessions = sessionValues;\n\n  //   setDialogueFields(values);\n  // }\n\n  // const handleRemoveSentence = (sessionIndex, sentenceIndex) => {\n  //   const values = [...dialogueFields];\n  //   values[0].sessions[sessionIndex].sentences.splice(sentenceIndex, 1);\n  //   setDialogueFields(values);\n  // }  \n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(\"dialogueFields\", dialogueFields);\n  };\n\n\n  return (\n    <>\n      <h1>Dynamic Form Fields in React</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"dialogue-info\"> \n          {dialogueFields.map((inputField, index) => (\n            <Fragment key={`${inputField}~${index}`}>\n              <div className=\"form-group col-sm\">\n                <label htmlFor=\"dialogueName\">Dialogue Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"dialogueName\"\n                  name=\"dialogueName\"\n                  value={inputField.dialogueName}\n                  onChange={event => handleDialogueInputChange(index, event)}\n                />\n              </div>\n\n              <div className=\"form-group row\">\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"isChinese\">Is Chinese</label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-control\"\n                    id=\"isChinese\"\n                    name=\"isChinese\"\n                    value={inputField.isChinese}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"displayOrder\">Display Order</label>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"displayOrder\"\n                    name=\"displayOrder\"\n                    value={inputField.displayOrder}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"autoTagExtraction\">Auto Tag Extraction</label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"form-control\"\n                    id=\"autoTagExtraction\"\n                    name=\"autoTagExtraction\"\n                    value={inputField.autoTagExtraction}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"form-group row\">\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"defaultMediaWaitTime\">Default Media Wait Time</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"defaultMediaWaitTime\"\n                    name=\"defaultMediaWaitTime\"\n                    value={inputField.defaultMediaWaitTime}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"mediaIntervalTime\">Media Interval Time</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"mediaIntervalTime\"\n                    name=\"mediaIntervalTime\"\n                    value={inputField.mediaIntervalTime}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"sessionIntervalTime\">Session Interval Time</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"sessionIntervalTime\"\n                    name=\"sessionIntervalTime\"\n                    value={inputField.sessionIntervalTime}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n                <div className=\"form-group col-sm\">\n                  <label htmlFor=\"sentenceIntervalTime\">Sentence Interval Time</label>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"sentenceIntervalTime\"\n                    name=\"sentenceIntervalTime\"\n                    value={inputField.sentenceIntervalTime}\n                    onChange={event => handleDialogueInputChange(index, event)}\n                  />\n                </div>\n\n              </div>\n              \n              \n              <div className=\"session-info\">\n                {sessionFields.map((sessionField, sessionIndex) => (\n                  <Fragment key={`${sessionField}~${sessionIndex}`}>\n                    <br/><hr></hr><hr></hr><hr></hr><br/><br/>\n                    \n                    <div className=\"form-group row\">\n                      <div className=\"form-group col-sm\">\n                        <label htmlFor=\"name\">Session Name</label>\n                        <input\n                          type=\"text\"\n                          className=\"form-control\"\n                          id=\"name\"\n                          name=\"name\"\n                          value={sessionField.name}\n                          onChange={event => handleSessionInputChange(sessionIndex, event)}\n                        />\n                      </div>\n                      <div className=\"form-group col-sm\">\n                        <label htmlFor=\"name\">Session Id</label>\n                        <input\n                          type=\"number\"\n                          className=\"form-control\"\n                          id=\"id\"\n                          name=\"id\"\n                          value={sessionField.id}\n                          onChange={event => handleSessionInputChange(sessionIndex, event)}\n                        />\n                      </div>\n                      <div className=\"form-group col-sm\">\n                        <label htmlFor=\"weight\">Session Weight</label>\n                        <input\n                          type=\"number\"\n                          className=\"form-control\"\n                          id=\"weight\"\n                          name=\"weight\"\n                          value={sessionField.weight}\n                          onChange={event => handleSessionInputChange(sessionIndex, event)}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"form-group col-sm\">\n                      <label htmlFor=\"s_tags\">Session Tags</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"s_tags\"\n                        name=\"s_tags\"\n                        value={sessionField.s_tags}\n                        onChange={event => handleSessionInputChange(sessionIndex, event)}\n                      />\n                    </div>\n\n                    <div className=\"sentence-info\">\n                      {sentenceFields.map((sentenceField, sentenceIndex) => (\n                        <Fragment key={`${sentenceField}~${sentenceIndex}`}>\n                          <hr></hr>\n                          <div className=\"form-group col-sm\">\n                            <label htmlFor=\"sentence\">Sentence</label>\n                            <input\n                              type=\"text\"\n                              className=\"form-control\"\n                              id=\"sentence\"\n                              name=\"sentence\"\n                              value={sentenceField.sentence}\n                              onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                            />\n                          </div>\n\n                          <div className=\"form-group row\">\n                            <div className=\"form-group col-sm\">\n                              <label htmlFor=\"actions\">Actions</label>\n                              <textarea\n                                className=\"form-control\"\n                                id=\"actions\"\n                                name=\"actions\"\n                                rows = \"5\"\n                                cols = \"50\"\n                                value={sentenceField.reactions}\n                                onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                              />\n                            </div>\n                            <div className=\"form-group col-sm\">\n                              <label htmlFor=\"emotions\">Emotions</label>\n                              <textarea\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"emotions\"\n                                name=\"emotions\"\n                                rows = \"5\"\n                                cols = \"50\"\n                                value={sentenceField.reactions}\n                                onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                              />\n                            </div>\n                            <div className=\"form-group col-sm\">\n                              <label htmlFor=\"movements\">Movements</label>\n                              <textarea\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"movements\"\n                                name=\"movements\"\n                                rows = \"5\"\n                                cols = \"50\"\n                                value={sentenceField.reactions}\n                                onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                              />\n                            </div>\n                            <div className=\"form-group col-sm\">\n                              <label htmlFor=\"sceneTriggers\">Scene Triggers</label>\n                              <textarea\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"sceneTriggers\"\n                                name=\"sceneTriggers\"\n                                rows = \"5\"\n                                cols = \"50\"\n                                value={sentenceField.reactions}\n                                onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                              />\n                            </div>\n                            <div className=\"form-group col-sm\">\n                              <label htmlFor=\"displays\">Displays</label>\n                              <textarea\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"displays\"\n                                name=\"displays\"\n                                rows = \"5\"\n                                cols = \"50\"\n                                value={sentenceField.reactions}\n                                onChange={event => handleSentenceInputChange(sessionIndex, sentenceIndex, event)}\n                              />\n                            </div>\n                          </div>\n\n                          \n                                        \n                          <div className=\"form-group col-sm\">\n                            <button\n                              className=\"btn btn-link\"\n                              type=\"button\"\n                              onClick={() => handleRemoveSentence(sessionIndex, sentenceIndex)}\n                            >\n                              Remove Sentence\n                            </button>\n                          </div>\n                        </Fragment>\n                      ))}\n                    </div>\n\n                    <hr></hr>\n\n                    <div className=\"form-group col-sm\">\n                      <button\n                        className=\"btn btn-link\"\n                        type=\"button\"\n                        onClick={() => handleAddSentence(sessionIndex)}\n                      >\n                        Add Sentence\n                      </button>     \n                    </div>\n\n                    <hr></hr>\n                    \n                    <div className=\"form-group col-sm\">\n                      <button\n                        className=\"btn btn-link\"\n                        type=\"button\"\n                        onClick={() => handleRemoveSession(sessionIndex)}\n                      >\n                        Remove Session\n                      </button>\n                    </div>\n                  </Fragment>\n                  \n                    ))}\n              </div>\n              <hr></hr><hr></hr><hr></hr>\n              <div className=\"form-group col-sm\">\n                <button\n                  className=\"btn btn-link\"\n                  type=\"button\"\n                  onClick={() => handleAddSession()}\n                >\n                  Add Session\n                </button>     \n              </div>\n            </Fragment>\n          ))}\n        </div>\n\n        \n        <div className=\"submit-button\">\n          <button\n            className=\"btn btn-primary mr-2\"\n            type=\"submit\"\n            onSubmit={handleSubmit}\n          >\n            Save\n          </button>\n        </div>\n        <br/>\n        <pre>\n          {JSON.stringify(dialogueFields, null, 2)}\n        </pre>\n      </form>\n    </>\n  )\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}